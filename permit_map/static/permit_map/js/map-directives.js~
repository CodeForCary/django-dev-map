angular.module('mapapp.directives', [ 'mapapp.services', 'django' ])
.directive('mapView', [ '$q', 'permits', function($q, permits, mapdata, urls) {
	function is_enabled(name, filters) {
		enabled = false;
		for (var i = 0; i < filters.length; i++) {
			if (filters[i].name == name) {
				enabled = filters[i].value;
				break;
			}
		}
		return enabled;
	}
	return {
		transclude: true,
		restrict: 'E',
		scope: {
			binding: '='
		},
		link: function($scope, $element, $attrs) {
			var map = new google.maps.Map($element[0], {
				disableDefaultUI: true,
				//zoomControl: true,
				zoom: 15
			});
			console.log(mapdata);
			//map.setCenter(mapdata.centroid);

			permits.all().then(function(data) {
				var regions = map.data.addGeoJson(data);
				for (i = 0; i < regions.length; i++) {
					regions[i].setProperty('first_seen', permits.toMonth(regions[i].getProperty('first_seen')));// new Date(regions[i].getProperty('first_seen')).getTime());
					regions[i].setProperty('last_seen', permits.toMonth(regions[i].getProperty('last_seen'))); //new Date(regions[i].getProperty('last_seen')).getTime());
				}
				$scope.regions = regions;
			});

			var unwatch = $scope.$watch('binding.centroid', function(centroid) {
				if (centroid) {
					map.data.setStyle(function(feature) {
						return {
							fillColor: permits.colorOf(feature.getProperty('category'))
							//fillOpacity: 0.9
						};
					});
					//map.setCenter(centroid);
					unwatch();
				}
			});

			$scope.$watch('binding.filters', function(f) {
				var r = $scope.regions; // make this easier to type
				if (r) { // is called initially with 'r' as null
					map.data.revertStyle(); // revert all overrides
					for (var i = 0; i < r.length; i++) {
						var first = r[i].getProperty('first_seen');
						var last = r[i].getProperty('last_seen');

						visible = is_enabled(r[i].getProperty('category'), f.categories) &&
							  is_enabled(r[i].getProperty('township'), f.towns) &&
							  ((first >= f.dateMin && first <= f.dateMax) ||
							   (last >= f.dateMin && last <= f.dateMax))
						if (!visible) {
							map.data.overrideStyle(r[i], { visible: false });
						}
					}
				}
			}, true);

			/*$scope.$watch('binding.selected', function(f) {
				if (f) {
					map.panTo(f.centroid);
				}
			});*/
		}
	};
}])
.directive('mapSearch', [ '$q', 'permits', 'urls', function($q, permits, urls) {
	var controller = {
	};
	return {
		templateUrl: urls.templates + 'search-box.html',
		transclude: true,
		restrict: 'E',
		scope: {
			binding: '='
		},
		link: function($scope, $element, $attrs) {
			// TODO kendm: Search functions; Watch vars
		}
	};
}]);
